// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////// ENUMS ////////////////////

// 유저 역할
enum UserType {
  CUSTOMER // 일반 유저
  DRIVER // 기사님
}

// 로그인 제공자
enum AuthProvider {
  LOCAL // 자체 가입
  GOOGLE // 구글
  NAVER // 네이버
  KAKAO // 카카오
}

// 이사 유형
enum MoveType {
  SMALL
  HOME
  OFFICE
}

// 견적 요청 상태
enum RequestStatus {
  PENDING // (시스템상)고객이 이사요청서를 작성한 직후, 견적 기다리는상태
  APPROVED // (고객) 고객이 기사님의견적중 하나견적을 수락함
  COMPLETED // (관리자/기사님수동) 실제 이사가 완료됨
  REJECTED // (관리자/지정기사) 관리자/기사가 고객요청서를 반려한 상태(기사님이 고객의 견적 요청서 자체를 반려하는 경우)
  CANCELLED // (고객) 고객이 이사요청을 직접 취소
  EXPIRED // (시스템) 견적수락기한이 지나 자동 만료
}

// 견적 응답 상태
enum EstimateStatus {
  PROPOSED // (기사) 기사님이 기사견적을 보낸 직후 / 기사 제안 상태
  ACCEPTED // (고객) 고객이 해당 견적을 선택함
  REJECTED // (기사) 기사님이 직접 반려처리함(기사님이 자신이 제안한 견적을 직접 반려하는 경우)
  AUTO_REJECTED // (시스템) 고객이 다른견적을 수락했기 때문에 자동 반려됨
}

// 주소 역할 (고객 기준)
enum AddressRole {
  FROM // 출발지
  TO // 도착지
  EXTRA // 기타 주소 (예: 짐 보관처 등)
}

// 전국 광역시/도 (RegionType)
enum RegionType {
  SEOUL
  BUSAN
  DAEGU
  INCHEON
  GWANGJU
  DAEJEON
  ULSAN
  SEJONG
  GYEONGGI
  GANGWON
  CHUNGBUK
  CHUNGNAM
  JEONBUK
  JEONNAM
  GYEONGBUK
  GYEONGNAM
  JEJU
}

// 알림 종류
enum NotificationType {
  ESTIMATE_REQUEST // 견적 요청이 발생함
  ESTIMATE_ACCEPTED // 견적이 수락됨
  ESTIMATE_REJECTED // 견적이 반려됨
  MOVE_COMPLETED // 이사 완료 알림
  REVIEW_REQUESTED // 리뷰 요청 알림
  MESSAGE // 일반 메시지
  MOVE_CONFIRMED // 이사 확정 알림
  DESIGNATED_REQUEST // 지정 견적 요청 알림
  MOVE_DAY_REMINDER // 이사 당일 알림
  REVIEW_RECEIVED // 리뷰 등록 알림
  WELCOME // 회원가입 알림
  ESTIMATE_PROPOSAL // 견적 제안
}

// 다국어 지원 언어 코드
enum LangCode {
  ko
  en
  zh
}

//////////////////// MODELS ////////////////////

// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// ⚠️ AuthUser, Customer, Driver 모델은 변경 금지!
// 👉 인증 및 권한 로직과 연결되어 있어 구조 변경 시 치명적 오류 발생 가능
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

// 공통 인증 정보 (모든 사용자 공통)
model AuthUser {
  id         String       @id @default(cuid()) // 고유 ID
  email      String       @unique // 이메일 (고유)
  password   String? // 비밀번호 (소셜 로그인은 null 가능)
  phone      String? // 전화번호
  name       String //공통 실명 필드 (회원가입 시 입력, 수정 가능)
  userType   UserType // 유저 타입 (CUSTOMER / DRIVER)
  provider   AuthProvider @default(LOCAL) // 로그인 제공자 (로컬/소셜)
  providerId String? // 소셜 로그인 ID
  createdAt  DateTime     @default(now()) // 생성일
  updatedAt  DateTime     @updatedAt // 수정일
  deletedAt  DateTime? // 소프트 삭제

  // 관계
  customer              Customer? // 일반 유저 정보
  driver                Driver? // 기사님 정보
  receivedNotifications Notification[] @relation("ReceivedNoti") // 받은 알림
  sentNotifications     Notification[] @relation("SentNoti") // 보낸 알림
}

// 일반 사용자 상세 정보
model Customer {
  id           String     @id @default(cuid())
  authUserId   String     @unique // AuthUser와 연결
  profileImage String? // 프로필 이미지 URL
  moveType     MoveType[] // 이사 유형 필수값으로 변경
  currentArea  String // 현재 위치(시/군/구) 필수값으로 변경 추가 수정 할 수도 있음
  moveDate     DateTime? // 이사 날짜
  deletedAt    DateTime? // 소프트 삭제

  authUser  AuthUser          @relation(fields: [authUserId], references: [id])
  requests  EstimateRequest[] // 고객이 생성한 이사 요청들
  reviews   Review[] // 작성한 리뷰 목록
  favorites Favorite[] // 찜한 기사님 목록
  addresses CustomerAddress[] // 연결된 주소 목록 (다대다, 역할 포함)

  languagePrefId String?             @unique // 언어 설정 ID
  languagePref   LanguagePreference? @relation("CustomerLanguage", fields: [languagePrefId], references: [id])
}

// 기사님 상세 정보
model Driver {
  id                 String                    @id @default(cuid())
  authUserId         String                    @unique // AuthUser와 연결
  nickname           String                    @unique // 닉네임
  profileImage       String? // 프로필 이미지
  shortIntro         String // 간단 소개 필수값으로 변경
  detailIntro        String // 상세 소개 필수값으로 변경
  moveType           MoveType[] // 제공 서비스 필수값으로 변경
  career             Int //String에서 Int로 타입만 변경 필수값으로 변경
  work               Int                       @default(0) //추가
  deletedAt          DateTime? // 소프트 삭제
  designatedRequests DesignatedDriver[] // 지정 요청받은 견적 요청 목록
  authUser           AuthUser                  @relation(fields: [authUserId], references: [id])
  serviceAreas       DriverServiceArea[] // 활동 가능 지역
  estimates          Estimate[] // 견적 응답 목록
  reviewsReceived    Review[] // 받은 리뷰
  estimateRejections DriverEstimateRejection[] // 견적 요청 반려 기록

  averageRating Float      @default(0)
  favorite      Favorite[] // 소문자로 변경

  languagePrefId String?             @unique // 언어 설정 ID
  languagePref   LanguagePreference? @relation("DriverLanguage", fields: [languagePrefId], references: [id])
}

// 기사님 활동 가능 지역 정보 (기사 1명 → 여러 지역 가능)
model DriverServiceArea {
  id       String     @id @default(cuid()) // 고유 식별자
  driverId String // 활동 기사 ID (외래 키)
  region   RegionType // 광역시/도 (예: 서울, 경기)
  district String? // 시/군/구 (예: 강남구, 수원시)

  driver Driver @relation(fields: [driverId], references: [id]) // 기사와 연결

  @@unique([driverId, region, district]) // 기사 한 명은 같은 지역을 중복 등록할 수 없음
  @@index([region]) // 지역 단위 조회용 인덱스
  @@index([district]) // 시/군/구 단위 조회용 인덱스
}

// 주소 정보 테이블 (고객, 기사 활동지, 이사 요청 등에 사용되는 기본 주소 테이블)
model Address {
  id         String     @id @default(cuid()) // 주소 고유 ID
  postalCode String // 우편번호
  street     String // 도로명 주소
  detail     String? // 상세 주소 (동, 호 등)
  region     RegionType // 광역시/도
  district   String // 시/군/구

  // 이사 요청에서 출발지/도착지로 사용되는 경우
  requestsFrom EstimateRequest[] @relation("RequestFrom") // 출발 주소로 사용된 요청 목록
  requestsTo   EstimateRequest[] @relation("RequestTo") // 도착 주소로 사용된 요청 목록

  // 고객 주소 연결 (다대다, CustomerAddress 통해 연결됨)
  customerAddresses CustomerAddress[]

  @@unique([postalCode, street, detail]) // 중복 주소 등록 방지
  @@index([region]) // 광역시/도 필터링 인덱스
  @@index([district]) // 시/군/구 필터링 인덱스
}

// 고객이 등록한 주소 정보와의 연결 테이블
// 고객과 주소 간 다대다 관계를 정의하고, 주소의 용도(role)를 명시함 (출발지, 도착지, 기타)
// customLabel을 통해 "회사", "창고" 등 식별 가능한 이름 지정 가능
model CustomerAddress {
  id          String      @id @default(cuid()) // 고유 ID
  customerId  String // 연결된 고객 ID
  addressId   String // 연결된 주소 ID
  role        AddressRole // 주소의 용도 (FROM, TO, EXTRA)
  customLabel String? // 선택: "회사", "창고" 등 라벨
  createdAt   DateTime    @default(now()) // 연결 생성 시각
  updatedAt   DateTime    @updatedAt // 마지막 수정 시각
  deletedAt   DateTime? // 소프트 삭제 시각 (null이면 유효)

  customer Customer @relation(fields: [customerId], references: [id]) // 고객 참조
  address  Address  @relation(fields: [addressId], references: [id]) // 주소 참조

  @@unique([customerId, addressId, role]) // 같은 고객이 동일한 주소를 동일한 용도로 중복 연결 금지
  @@index([deletedAt]) // 소프트 삭제된 데이터 필터링용 인덱스
  @@index([customerId]) // 고객 ID 기반 빠른 조회
  @@index([addressId]) // 주소 ID 기반 빠른 조회
}

// 견적 요청 (고객 → 기사)
model EstimateRequest {
  id            String        @id @default(cuid())
  customerId    String // 고객 ID
  moveType      MoveType // 이사 유형
  moveDate      DateTime // 이사 날짜
  fromAddressId String // 출발지 주소
  toAddressId   String // 도착지 주소
  status        RequestStatus // 상태

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  estimates          Estimate[] // 기사 응답들
  review             Review? // 연결된 리뷰
  designatedDrivers  DesignatedDriver[] // 고객이 지정 요청한 기사 목록
  estimateRejections DriverEstimateRejection[] // 기사들의 반려 기록
  customer           Customer                  @relation(fields: [customerId], references: [id])
  fromAddress        Address                   @relation("RequestFrom", fields: [fromAddressId], references: [id])
  toAddress          Address                   @relation("RequestTo", fields: [toAddressId], references: [id])
}

model DesignatedDriver {
  id                String   @id @default(cuid())
  estimateRequestId String // 어떤 견적 요청에 대한 지정 요청인지
  driverId          String
  createdAt         DateTime @default(now())

  estimateRequest EstimateRequest @relation(fields: [estimateRequestId], references: [id])
  driver          Driver          @relation(fields: [driverId], references: [id])

  @@unique([estimateRequestId, driverId]) // 한 요청에 동일 기사님을 지정할 수 없음
  @@index([estimateRequestId])
}

// 견적 응답 (기사 → 고객)
model Estimate {
  id                String         @id @default(cuid())
  driverId          String // 기사 ID
  estimateRequestId String // 견적 요청 ID
  price             Int? // 제안 가격
  comment           String? // 코멘트
  status            EstimateStatus @default(PROPOSED)
  rejectReason      String? // 반려 사유
  isDesignated      Boolean        @default(false) // 지정 기사 여부
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  deletedAt         DateTime?

  driver          Driver          @relation(fields: [driverId], references: [id])
  estimateRequest EstimateRequest @relation(fields: [estimateRequestId], references: [id])

  @@unique([estimateRequestId, driverId])
}

// 리뷰 (1개의 견적 요청 당 1개만 가능)
model Review {
  id                String          @id @default(cuid())
  customerId        String // 작성자
  driverId          String // 대상 기사님
  estimateRequestId String // 연결된 견적 요청
  rating            Int // 평점
  content           String // 리뷰 내용
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime? // 소프트 삭제
  writer            Customer        @relation(fields: [customerId], references: [id])
  driver            Driver          @relation(fields: [driverId], references: [id])
  request           EstimateRequest @relation(fields: [estimateRequestId], references: [id])

  @@unique([estimateRequestId])
}

// 찜 기능 (고객이 기사님을 찜)
model Favorite {
  id         String    @id @default(cuid())
  customerId String // 찜한 사람
  driverId   String // 찜 당한 기사
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  customer Customer @relation(fields: [customerId], references: [id])
  driver   Driver   @relation(fields: [driverId], references: [id])

  @@unique([customerId, driverId])
}

// 알림 기능
model Notification {
  id        String           @id @default(cuid())
  message   String // 알림 내용
  path      String // 클릭 시 이동
  type      NotificationType // 알림 종류
  isRead    Boolean          @default(false) // 읽음 여부
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?

  receiverId String // 수신자 ID
  senderId   String? // 발신자 ID

  receiver AuthUser  @relation("ReceivedNoti", fields: [receiverId], references: [id])
  sender   AuthUser? @relation("SentNoti", fields: [senderId], references: [id])
}

// 다국어 설정
model LanguagePreference {
  id       String   @id @default(cuid())
  language LangCode // 언어 코드 (ko, en, zh)
  value    String? // 기타 커스텀 설명

  customer Customer? @relation("CustomerLanguage")
  driver   Driver?   @relation("DriverLanguage")
}

// 기사 견적 요청 반려 기록
model DriverEstimateRejection {
  id                String   @id @default(cuid())
  estimateRequestId String
  driverId          String
  reason            String?
  createdAt         DateTime @default(now())

  estimateRequest EstimateRequest @relation(fields: [estimateRequestId], references: [id])
  driver          Driver          @relation(fields: [driverId], references: [id])

  @@unique([estimateRequestId, driverId])
  @@index([driverId])
  @@index([estimateRequestId])
}
