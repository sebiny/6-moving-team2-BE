name: Deploy To EC2

on:
  push:
    branches:
      - develop

jobs:
  Test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 깃헙 레포지토리 불러오기
        uses: actions/checkout@v4

      - name: Node 설치
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 의존성 설치
        run: npm ci

      - name: Prisma 클라이언트 생성
        run: npx prisma generate

      - name: Prisma 마이그레이션 실행
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        run: npx prisma migrate deploy

      - name: 테스트 코드 실행
        run: npm run test:unit -- --maxWorkers=1 --forceExit
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PORT: ${{ secrets.PORT }}
          ACCESS_TOKEN_EXPIRES_IN: ${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          SERVER_URL: ${{ secrets.SERVER_URL }}
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DOMAIN: ${{secrets.CLOUDFRONT_DOMAIN}}

  Deploy:
    runs-on: ubuntu-latest # 깃헙액션 워크플로우가 실행되는 OS 환경. EC2 OS와 같은 필요 없음
    needs: Test
    steps:
      - name: 깃헙 레포지토리 불러오기
        uses: actions/checkout@v4

      - name: Node 설치
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 의존성 설치
        run: npm ci

      - name: .env 파일 생성
        run: |
          echo "${{ secrets.ENV }}" > .env

      - name: .env 확인
        run: cat .env

      - name: 빌드
        run: npm run build

      - name: 빌드파일 압축하기
        run: tar -czvf project.tar.gz dist .env package.json package-lock.json

      - name: scp 사용하여 EC2에 빌드파일 전송하기
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: project.tar.gz
          target: /home/ec2-user/6-moving-team2-BE

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }} # EC2의 주소
          username: ${{ secrets.EC2_USERNAME }} # EC2 접속 username
          key: ${{ secrets.EC2_PRIVATE_KEY }} # EC2의 Key 파일의 내부 텍스트
          script_stop: true # 아래 script 중 실패하는 명령이 하나라도 있으면 실패로 처리
          script: |
            cd /home/ec2-user/6-moving-team2-BE
            tar -xvf project.tar.gz
            rm -rf project.tar.gz
            npm ci
            pm2 kill
            pm2 start dist/server.js --name "express-server"
